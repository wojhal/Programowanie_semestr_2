import pygame
import random
from operator import itemgetter
import json


pygame.init()
pygame.font.init()
pygame.mixer.init()

# tworzenie okno
WIDTH, HEIGHT = 703, 770
SCREEN = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Footbrick Breaker")
font = pygame.font.Font("/Users/wojtek/Desktop/street-cred/street cred.otf", 32)
font_przyciski = pygame.font.Font("/Users/wojtek/Desktop/street-cred/street cred.otf", 28)
font_tytul = pygame.font.Font("/Users/wojtek/Desktop/street-cred/street cred.otf", 40)
font_duzy = pygame.font.Font("/Users/wojtek/Desktop/street-cred/street cred.otf", 50)
font_zasady = pygame.font.Font("/Users/wojtek/Desktop/street-cred/street cred.otf", 25)
font_potezny = pygame.font.Font("/Users/wojtek/Desktop/street-cred/street cred.otf", 80)
FPS = 60
PL_WIDTH = 100
PL_HEIGHT = 10
BALL_PR = 10
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
YELLOW = (255, 255, 0)
GREEN = (50, 205, 50)
GREY = (128, 128, 128)
RED = (255, 0, 0)
betis = "XXXXXXYXXXXXX\nYYYYYYGYYYYYY\nYGWGWGWGWGWGY\nYGWGWGGWWGWGY\nXYWGWGWGWGWYX\nXXYGWWGWWGYXX\nXXXYWGWGWYXXX\nXXXXYGWGYXXXX\nXXXXXYWYXXXXX\nXXXXXXYXXXXXX"
swansea = "XXXXXXWBBBXX\nXXXXXWBWWWBX\nXXXXXWBWWWBB\nXXXXXXWBWWWX\nXXXWWWWWBWXX\nXXWWBBBWBBWX\nXWWBBWWWWBBX\nXWBBWBBBWWBB\nBBBWBBWWWWWB\nWWWBBWBBBWWB\nWBBBWBBWWWBW\nXWWWBBWWBBWX\nXWBBBWXXWWXX"
hanover = "XXXGGGGGGXXXX\nXWBBBGGGGBBBW\nWBBBBBBGGBBBWX\nWBBWBBGGBBGGX\nWBBBBBGBBGGGX\nXGGBBBGBBBGGX\nXGGGBBGBBBBBW\nXGGBBGGBBWBBW\nXWBBBGGBBBBBW\nWBBBGGGGBBBWX\nXXXXGGGGGGXXX"
juve = "XXXWWWWWWXXX\nWWWBBBBWBWWW\nWWWWWWBWBWWW\nWWWWWWBWBWWW\nWWWWWWBWBWWW\nWWWWWWBWBWWW\nWWWWWBBWBWWW\nWWWWBBWWBWWW\nWWWWWWWBBWWW\nWWWWWWBBWWWW\nWWWWWBBWWWWW"
furth = "XXXXGGGGGXXXX\nXXGGWWWWWGGXX\nXGWWWGWGWWWGX\nXGWWGGGGGWWGX\nGWWGWGGGWGWWG\nGWGGGWGWGGGWG\nGWWGGGGGGGWWG\nGWGGGWGWGGGWG\nGWWGWWGWWGWWG\nXGWWWGGWWWWGX\nXGWWGGWWWWWGX\nXXGGWWWWWGGXX\nXXXXGGGGGXXXX"
mapa = [betis, swansea, hanover, juve, furth]
lobby = "/Users/wojtek/Desktop/sounds/mixkit-stadium-joy-shouting-crowd-3022.wav"
hicik = "/Users/wojtek/Desktop/sounds/mixkit-arrow-shot-through-air-2771.wav"
hitens = "/Users/wojtek/Desktop/sounds/mixkit-golf-ball-hit-2105.wav"
hicior = "/Users/wojtek/Desktop/sounds/mixkit-basketball-ball-tap-2092.wav"
lamaga = "/Users/wojtek/Desktop/sounds/mixkit-crowd-disappointment-long-boo-463.wav"
dzwieki = True

# platforma
class Platforma:
    VEL = 0

    def __init__(self, x, y, width, height, kolor):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.kolor = kolor

    def poruszanie(self, kierunek):
        self.x += self.VEL * kierunek

    def draw(self, SCREEN):
        pygame.draw.rect(SCREEN, self.kolor, (self.x, self.y, self.width, self.height))


# pi≈Çka
class Ball:
    VEL = -4
    VEL1 = 4

    def __init__(self, x, y, r):
        self.x = x
        self.y = y
        self.r = r
        self.x_vel = self.VEL1
        self.y_vel = self.VEL

    def poruszanie(self):
        self.x -= self.x_vel
        self.y += self.y_vel
        if self.x - self.r <= 0 or self.x + self.r >= WIDTH:
            self.x_vel = -1*self.x_vel
            if dzwieki == True:
                hicior_sound = pygame.mixer.Sound(hicior)
                pygame.mixer.Sound.play(hicior_sound)
        if self.y - self.r <= 0:
            self.y_vel = -1*self.y_vel
            if dzwieki == True:
                hicior_sound = pygame.mixer.Sound(hicior)
                pygame.mixer.Sound.play(hicior_sound)



    def draw(self, SCREEN):
        pilka = pygame.transform.scale(pygame.image.load("/Users/wojtek/Desktop/ball.png"), (2*self.r, 2*self.r))
        pilka_rect = pilka.get_rect()
        pilka_rect.center = (self.x, self.y)
        pygame.draw.circle(SCREEN, WHITE, (self.x, self.y), self.r)
        SCREEN.blit(pilka, pilka_rect)

# klocki
class Brick:

    def __init__(self,x,y,width,height,kolor):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.kolor = kolor
        self.hit = False

    def draw(self, SCREEN):
            pygame.draw.rect(SCREEN, self.kolor, (self.x, self.y, self.width, self.height))



def tlo():
    tlo = pygame.transform.scale(pygame.image.load("/Users/wojtek/Desktop/peach.png"), (WIDTH, HEIGHT))
    pygame.display.flip()
    SCREEN.blit(tlo, (0, 0))

# zderzenie brick-pilka
def brick_pilka(brick, pilka):
    if brick.y <= pilka.y <= brick.y + brick.height and pilka.r >= brick.x - pilka.x > 0 or brick.y <= pilka.y <= brick.y + brick.height and pilka.r >= pilka.x - (brick.x+brick.width) > 0:
        pilka.x_vel = -1*pilka.x_vel
        brick.hit = True
    elif brick.x <= pilka.x <= brick.x+brick.width and pilka.r >= pilka.y - (brick.y+brick.height) > 0 or brick.x <= pilka.x <= brick.x+brick.width and pilka.r >= brick.y - pilka.y > 0:
        pilka.y_vel = -1*pilka.y_vel
        brick.hit = True


# generowanie mapy
def generowanie_mapy(mapa):
    numer = random.randint(1, len(mapa))
    mapka = mapa[numer-1]
    bricks = [[*line.strip(',')] for line in mapka.split('\n') if line]
    gap = 2
    brick_width = WIDTH // len(bricks[0]) - gap
    brick_height = 30
    bricks_ele = []
    for rzedy in range(len(bricks)):
        for brick in range(len(bricks[rzedy])):
            if bricks[rzedy][brick] == "B":
                bricks[rzedy][brick] = Brick(brick * brick_width + gap * brick, rzedy * brick_height + gap * rzedy,
                                             brick_width, brick_height, BLACK)
                bricks_ele.append(bricks[rzedy][brick])
            elif bricks[rzedy][brick] == "G":
                bricks[rzedy][brick] = Brick(brick * brick_width + gap * brick, rzedy * brick_height + gap * rzedy,
                                             brick_width, brick_height, GREEN)
                bricks_ele.append(bricks[rzedy][brick])
            elif bricks[rzedy][brick] == "Y":
                bricks[rzedy][brick] = Brick(brick * brick_width + gap * brick, rzedy * brick_height + gap * rzedy,
                                             brick_width, brick_height, YELLOW)
                bricks_ele.append(bricks[rzedy][brick])
            elif bricks[rzedy][brick] == "W":
                bricks[rzedy][brick] = Brick(brick * brick_width + gap * brick, rzedy * brick_height + gap * rzedy,
                                             brick_width, brick_height, WHITE)
                bricks_ele.append(bricks[rzedy][brick])


    return bricks_ele



# zderzenie platforma-pilka
def platforma_pilka(platforma, pilka):
    if pilka.r + pilka.y == HEIGHT - 2 * platforma.height:
        punkt = round((pilka.x - platforma.x) / (platforma.width / 2), 1)
        if 0 <= punkt < 0.6 or 1.4 < punkt <= 2:
            pilka.x_vel = 2 * pilka.VEL1
        elif 0.6 <= punkt <= 1.4:
            pilka.x_vel = pilka.VEL1
        if platforma.x <= pilka.x < platforma.x + platforma.width / 2:
            if pilka.x_vel < 0:
                pilka.x_vel = -1 * pilka.x_vel
            pilka.y_vel = -1 * pilka.y_vel
        elif platforma.x + platforma.width / 2 < pilka.x <= platforma.x + platforma.width:
            if pilka.x_vel > 0:
                pilka.x_vel = -1 * pilka.x_vel
            pilka.y_vel = -1 * pilka.y_vel
        elif pilka.x == platforma.x + platforma.width/2:
            pilka.y_vel = -1 * pilka.y_vel
        if dzwieki == True:
            hitens_sound = pygame.mixer.Sound(hitens)
            pygame.mixer.Sound.play(hitens_sound)
    if HEIGHT - platforma.height <= pilka.y+pilka.r < HEIGHT:
        if pilka.r >= platforma.x - pilka.x > 0 and pilka.x_vel < 0 or \
                pilka.r >= pilka.x - (platforma.x+platforma.width) > 0 and pilka.x_vel > 0:
            pilka.x_vel = pilka.x_vel*-1

# okno
def wyglad_okna(platforma, pilka, bricks_ele, LIVES, WYNIK):
    tlo = pygame.transform.scale(pygame.image.load("/Users/wojtek/Desktop/peach.png"), (WIDTH, HEIGHT))
    pygame.display.flip()
    SCREEN.blit(tlo, (0, 0))
    platforma.draw(SCREEN)
    pilka.draw(SCREEN)
    for brick in bricks_ele:
        brick.draw(SCREEN)
    lives_text = font.render(f"Lives: {LIVES}", True, BLACK)
    SCREEN.blit(lives_text, (WIDTH-lives_text.get_width()-8, -5))
    lives_text = font.render(f'Lives: {LIVES}', True, WHITE)
    SCREEN.blit(lives_text, (WIDTH-lives_text.get_width()-10, -3))

    score_text = font.render(f'Score: {WYNIK}', True, BLACK)
    SCREEN.blit(score_text, (8, -5))
    score_text = font.render(f'Score: {WYNIK}', True, WHITE)
    SCREEN.blit(score_text, (10, -3))

# menu
class Przycisk:
    def __init__(self, napis, pos):
        self.napis = napis
        self.pos = pos
        self.button = pygame.rect.Rect((self.pos[0], self.pos[1]), (240, 40))

    def draw(self):
        pygame.draw.rect(SCREEN, BLACK, self.button, 0, 5)
        pygame.draw.rect(SCREEN, WHITE, [self.pos[0], self.pos[1], 240, 40], 5, 5)
        text2 = font_przyciski.render(self.napis, True, WHITE)
        SCREEN.blit(text2, (self.button.midleft[0]+10, self.button.midleft[1]-15))

    def check_clicked(self):
        if self.button.collidepoint(pygame.mouse.get_pos()) and pygame.mouse.get_pressed()[0]:
            return True
        else:
            return False

# menu
def draw_menu():
    pygame.mixer.music.load(lobby)
    pygame.mixer.music.play(loops=-1)
    while True:
        tlo()
        tytul1 = pygame.draw.rect(SCREEN, WHITE, [140, 65, 423, 170], 5, 5)
        tytul = pygame.draw.rect(SCREEN, BLACK, (150, 75, 403, 150))
        txt = font_tytul.render('FOOT-BRICK BREAKER!', True, 'WHITE')
        SCREEN.blit(txt, (tytul1.x + 30, (tytul1.y + tytul1.height)/2))
        # menu exit button
        GRA = Przycisk('START', (232, 280))
        GRA.draw()
        ZASADY = Przycisk('ZASADY', (232, 345))
        ZASADY.draw()
        SCORES = Przycisk('NAJLEPSZE WYNIKI', (232, 410))
        SCORES.draw()
        AUTOR = Przycisk('O AUTORZE', (232, 475))
        AUTOR.draw()
        USTAWIENIA = Przycisk("USTAWIENIA", (232, 540))
        USTAWIENIA.draw()
        WYJSCIE = Przycisk('KONIEC GRY', (232, 605))
        WYJSCIE.draw()

        if WYJSCIE.check_clicked():
            pygame.quit()
        if ZASADY.check_clicked():
            zasady()
        if SCORES.check_clicked():
            scores()
        if AUTOR.check_clicked():
            autor()
        if USTAWIENIA.check_clicked():
            ustawienia()
        if GRA.check_clicked():
            draw_game()

        click = False
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    pygame.quit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1:
                    click = True

# zasady
def zasady():
    running = True
    while running:
        tlo()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE or event.key == pygame.K_LEFT or event.key == pygame.K_BACKSPACE:
                    running = False
        zasady_tlo = pygame.draw.rect(SCREEN, WHITE, (60, 100, 583, 570))
        zasady_gry = font_duzy.render("ZASADY GRY:", True, BLACK)
        SCREEN.blit(zasady_gry, (210,100))
        pierwsza = font_przyciski.render("2.ZBIJAJ BLOKI I ZBIERAJ PUNKTY", True, BLACK)
        SCREEN.blit(pierwsza, (80, 300))
        druga = font_przyciski.render("3.NIE STRAƒÜ WSZYSTKICH ≈ªYƒÜ", True, BLACK)
        SCREEN.blit(druga, (80, 400))
        explain = font_zasady.render("1.RUSZAJ PLATFORMƒÑ LEWƒÑ I PRAWƒÑ STRZA≈ÅKƒÑ", True, BLACK)
        SCREEN.blit(explain, (80, 200))
        zyczenia = font_duzy.render("MI≈ÅEJ GRY :)", True, BLACK)
        SCREEN.blit(zyczenia, (210, 510))
    return

def autor():
    running = True
    while running:
        tlo()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE or event.key == pygame.K_LEFT or event.key == pygame.K_BACKSPACE:
                    running = False
        autor_tlo = pygame.draw.rect(SCREEN, WHITE, (50, HEIGHT//2, 603, 60))
        autor_gry = font_duzy.render("ODDA≈Å GRƒò 4 DNI PO CZASIE", True, BLACK)
        SCREEN.blit(autor_gry, (65, HEIGHT//2))

def zachowaj(highscores):
    with open('/Users/wojtek/Desktop/highscore.json', 'w') as file:
        json.dump(highscores, file)  


def laduj():
    try:
        with open('/Users/wojtek/Desktop/highscore.json', 'r') as file:
            highscores = json.load(file) 
    except FileNotFoundError:
        return [] 
    return sorted(highscores, key=itemgetter(1), reverse=True)

def scores():
    running = True
    while running:
        tlo()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE or event.key == pygame.K_LEFT or event.key == pygame.K_BACKSPACE:
                    running = False
        highscore1 = font_potezny.render('NAJLEPSZE WYNIKI', True, BLACK)
        SCREEN.blit(highscore1, (highscore1.get_width() // 12-3, 42))
        highscore2 = font_potezny.render('NAJLEPSZE WYNIKI', True, WHITE)
        SCREEN.blit(highscore2, (highscore2.get_width() // 12, 40))
        highscores = laduj()
        for y, (high_name, high_score) in enumerate(highscores):
            tekst1 = font_potezny.render(f'{high_name}:{high_score}', True, BLACK)
            SCREEN.blit(tekst1, (157, 152+y*100))
            tekst2 = font_potezny.render(f'{high_name}:{high_score}', True, WHITE)
            SCREEN.blit(tekst2, (160, 150+y*100))

def ustawienia():
    global dzwieki
    running = True
    while running:
        tlo()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE or event.key == pygame.K_LEFT or event.key == pygame.K_BACKSPACE:
                    running = False
                if event.key == pygame.K_q:
                    if dzwieki:
                        pygame.mixer.music.pause()
                        dzwieki = False
                    elif not dzwieki:
                        pygame.mixer.music.unpause()
                        dzwieki = True

        dzwiek_tlo = pygame.draw.rect(SCREEN, WHITE, (60, 100, 583, 570))
        dzwiek_gry = font_potezny.render("D≈πWIƒòK", True, BLACK)
        dzwiek_wylacz = font_duzy.render("WCI≈öNIJ 'Q' ≈ªEBY WY≈ÅƒÑCZYƒÜ", True, BLACK)
        dzwiek_wylacz2 = font_duzy.render("D≈πWIƒòK", True, BLACK)
        SCREEN.blit(dzwiek_gry, (210, 100))
        SCREEN.blit(dzwiek_wylacz, (63, 300))
        SCREEN.blit(dzwiek_wylacz2, (265, 360))



# gra
def draw_game():
    global highscores
    if dzwieki == True:
        pygame.mixer.music.pause()
    active = False
    platforma = Platforma(WIDTH // 2 - PL_WIDTH // 2, HEIGHT - 2 * PL_HEIGHT, PL_WIDTH, PL_HEIGHT, GREY)
    pilka = Ball(BALL_PR+1, HEIGHT - BALL_PR, BALL_PR)
    bricks_ele = generowanie_mapy(mapa)
    WYNIK = 0
    LIVES = 3
    pilka.x_vel = 0
    pilka.y_vel = 0
    clock = pygame.time.Clock()
    running = True
    bez_zyc = False
    wynikanie = False
    while running:
        clock.tick(FPS)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
                pygame.mixer.music.unpause()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE and not active:
                    active = True
                    pilka.x_vel = pilka.VEL1
                    pilka.y_vel = pilka.VEL
                    platforma.VEL = 5
        pilka.poruszanie()
        keys_pressed = pygame.key.get_pressed()
        if keys_pressed[pygame.K_LEFT] and platforma.x - platforma.VEL >= 0:  # LEFT
            platforma.poruszanie(-1)
        if keys_pressed[pygame.K_RIGHT] and platforma.x + platforma.VEL <= WIDTH - platforma.width:  # RIGHT
            platforma.poruszanie(1)
        platforma_pilka(platforma, pilka)
        for brick in bricks_ele:
            brick_pilka(brick, pilka)
            if brick.hit:
                if dzwieki == True:
                    hicik_sound = pygame.mixer.Sound(hicik)
                    pygame.mixer.Sound.play(hicik_sound)
                bricks_ele.remove(brick)
                WYNIK += 5
                if WYNIK % 250 == 0 and WYNIK != 0 and WYNIK <= 1000:
                    pilka.VEL1 += 0.5
        if not bricks_ele:
            platforma.x = WIDTH // 2 - PL_WIDTH // 2
            pilka.x = WIDTH // 2
            pilka.y = HEIGHT - 2* PL_HEIGHT - BALL_PR
            pilka.x_vel = pilka.VEL1
            pilka.y_vel = pilka.VEL
            bricks_ele = generowanie_mapy(mapa)
        if pilka.y > HEIGHT and bricks_ele:
            LIVES -= 1
            platforma.x = WIDTH // 2 - PL_WIDTH // 2
            pilka.x = WIDTH // 2
            pilka.y = HEIGHT - 2 * PL_HEIGHT - BALL_PR
            pilka.x_vel = pilka.VEL1
            pilka.y_vel = pilka.VEL
        wyglad_okna(platforma, pilka, bricks_ele, LIVES, WYNIK)
        if not active:
            press_space = font_tytul.render('NACI≈öNIJ SPACJE ABY ZAGRAƒÜ', True, BLACK)
            SCREEN.blit(press_space, (press_space.get_width()//4-3, 497))
            press_space2 = font_tytul.render('NACI≈öNIJ SPACJE ABY ZAGRAƒÜ', True, RED)
            SCREEN.blit(press_space2, (press_space.get_width() // 4, 500))
        if LIVES == 2:
            bez_zyc = True
            running = False
            if dzwieki == True:
                slabiak = pygame.mixer.Sound(lamaga)
                pygame.mixer.Sound.play(slabiak)
    while bez_zyc:
        tlo()
        informacja = font_potezny.render('PRZEGRA≈ÇE≈ö :(', True, BLACK)
        SCREEN.blit(informacja, (WIDTH // 6, HEIGHT // 2 - informacja.get_height()))
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                bez_zyc = False
                if dzwieki == True:
                    pygame.mixer.Sound.set_volume(slabiak, 0.0)
                    pygame.mixer.music.unpause()
            if event.type == pygame.KEYDOWN:
                highscores = laduj()
                if WYNIK > highscores[-1][1]:
                    bez_zyc = False
                    wynikanie = True
                    if dzwieki == True:
                        pygame.mixer.Sound.set_volume(slabiak, 0.0)
                        pygame.mixer.music.unpause()
    aktywnosc = False
    while wynikanie:
        tlo()
        if not aktywnosc:
            text = ''
        imie1 = font_tytul.render('WPISZ SWOJƒÑ NAZWƒò:', True, BLACK)
        SCREEN.blit(imie1, (WIDTH//5-3, HEIGHT//2-48))
        imie2 = font_tytul.render('WPISZ SWOJƒÑ NAZWƒò:', True, WHITE)
        SCREEN.blit(imie2, (WIDTH//5, HEIGHT//2-50))
        input_rect = pygame.Rect(WIDTH//5+20, HEIGHT//2, WIDTH//2, 100)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                wynikanie = False
            if event.type == pygame.KEYDOWN:
                if event.key != pygame.K_RETURN:
                    aktywnosc = True
                    if event.key == pygame.K_BACKSPACE:
                        text = text[:-1]
                    else:
                        if len(text) <= 15:
                            text += event.unicode
                else:
                    highscores.append([text, WYNIK])
                    highscores = sorted(highscores, key=itemgetter(1), reverse=True)
                    if len(highscores) > 5:
                        highscores.pop()
                    zachowaj(highscores)
                    aktywnosc = False
                    wynikanie = False

        pygame.draw.rect(SCREEN, WHITE, input_rect)
        dane_gracza = font_przyciski.render(text, True, RED)
        SCREEN.blit(dane_gracza, (input_rect.x+10, input_rect.y+30))
        pygame.display.flip()

def main():
    draw_menu()

main()
